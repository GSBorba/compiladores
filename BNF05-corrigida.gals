#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
Package = codigoLexicoSintatico
ScannerCaseSensitive = true
ScannerTable = Compact
Input = Stream
Parser = LL
#RegularDefinitions
prefixo: "_" (i|f|b|s)

inteiro: 0 | [1-9][0-9]*

corpo: ([^\n\""\""%"]* | % (i|f|s|b))*
#Tokens
// EQUIPE: Andre Heller; Gabriel de Souza Borba; Henrique de Oliveira
// NOTA: 9,5

//palavra reservada
reservada: [a-z]+

//identificador
identificador: {prefixo}([A-Z]([a-z0-9]+[A-Z]?)* | [a-z]([A-Z]?[a-z0-9])*[A-Z]?)

//contante_int
int: 0 | [1-9][0-9]*

//constante_float
float: {inteiro}"."[0-9]([0-9]*[1-9])?

//constante_string
string: \"{corpo}\"

//relação das palavras reservadas
//do else false fun if in main out repeat true while
do = reservada: "do"
else = reservada: "else"
false = reservada: "false"
fun = reservada: "fun"
if = reservada: "if"
in = reservada: "in"
main = reservada: "main"
out = reservada: "out"
repeat = reservada: "repeat"
true = reservada: "true"
while = reservada: "while"

//relação dos simbolos especiais
//& | ! , ; = : ( ) { } == != < > + - * /
"&"
"|"
"!"
","
";"
"="
":"
"("
")"
"{"
"}"
"=="
"!="
"<"
">"
"+"
"-"
"*"
"/"

//reconhecer e ignorar caracteres de formatação
:[\s\t\n\r]

//reconhecer e ignorar comentários
:! "#"[^\n]*
:! "["[^\[\]]*"]"
#NonTerminals
<formaGeral>

<listaInstrucoes>
<instrucao>
<declaracaoConstate>
<listaIdentificadores>
<valor>
<comando>
<atribuicao>
<entradaDados>
<saidaDados>
<selecao>
<repeticao>
<listaEntrada>
<listaComandos>
<expressao>
<listaExpressoes>

<listaInstrucoes1>
<listaIdentificadores1>
<listaEntrada1>
<listaExpressoes1>
<selecao1>
<listaComandos1>

<elemento>
<expressao_>
<relacional>
<relacional_>
<aritmetica>
<aritmetica_>
<operador_relacional>
<termo>
<termo_>
<fator>

<instrucao1>
#Grammar
<formaGeral> ::= fun main "{" <listaInstrucoes> "}" ;

<listaInstrucoes> ::= <instrucao> ";" <listaInstrucoes1> ; 
<listaInstrucoes1> ::= <listaInstrucoes> | î ;

<instrucao> ::= <listaIdentificadores> <instrucao1>
	     	| <entradaDados> 
		| <saidaDados> 
		| <selecao> 
		| <repeticao> ;

<instrucao1> ::= <declaracaoConstate> | î | <atribuicao> ;

<declaracaoConstate> ::= ":" <valor> ;

<listaIdentificadores> ::= identificador <listaIdentificadores1> ;
<listaIdentificadores1> ::= "," <listaIdentificadores> | î ;
<valor> ::= int | float | string | true | false ;

<comando> ::= <atribuicao> | <entradaDados> | <saidaDados> | <selecao> | <repeticao> ;

<atribuicao> ::= "=" <expressao> ;

<entradaDados> ::= in "(" <listaEntrada> ")" ;

<listaEntrada> ::= string "," <listaIdentificadores>  <listaEntrada1> | <listaIdentificadores>  <listaEntrada1> ;
<listaEntrada1> ::= ";" <listaEntrada> | î ;

<saidaDados> ::= out "(" <listaExpressoes> ")" ;
<listaExpressoes> ::= <expressao> <listaExpressoes1> ;
<listaExpressoes1> ::= "," <listaExpressoes> | î ;

<selecao> ::= if "(" <expressao> ")" "{" <listaComandos> "}" <selecao1> ;
<selecao1> ::=  else "{" <listaComandos> "}" | î ;

<listaComandos> ::= <comando> ";" <listaComandos1> ;
<listaComandos1> ::= <listaComandos> | î ;


<repeticao> ::= while "(" <expressao> ")" do "{" <listaComandos> "}" | repeat "{" <listaComandos> "}" while "(" <expressao> ")" ;

<expressao>			::= <elemento> <expressao_>  ;
<expressao_>			::= î | "&" <elemento> <expressao_> | "|" <elemento> <expressao_> ;
<elemento>			::= <relacional> | true | false | "!" <elemento> ;

<relacional>			::= <aritmetica> <relacional_> ;
<relacional_>			::= î | <operador_relacional> <aritmetica> ;
<operador_relacional>	::= "==" | "!=" | "<" | ">" ;

<aritmetica>			::= <termo> <aritmetica_>  ;
<aritmetica_>			::= î | "+" <termo> <aritmetica_> | "-" <termo> <aritmetica_> ;

<termo>			::= <fator> <termo_> ;
<termo_>			::= î | "*" <fator> <termo_> | "/" <fator> <termo_> ;

<fator>			::= identificador | 
			    	    int | 
		   	    	    float | 
			    	    string | 
		   	    	    "(" <expressao> ")" |
	    	  	    	    "+" <fator> | 
	    		    	    "-" <fator> ;

